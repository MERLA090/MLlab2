{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "b=load_boston()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])\n"
     ]
    }
   ],
   "source": [
    "print(b.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(506, 13)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(b.data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _boston_dataset:\n",
      "\n",
      "Boston house prices dataset\n",
      "---------------------------\n",
      "\n",
      "**Data Set Characteristics:**  \n",
      "\n",
      "    :Number of Instances: 506 \n",
      "\n",
      "    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n",
      "\n",
      "    :Attribute Information (in order):\n",
      "        - CRIM     per capita crime rate by town\n",
      "        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n",
      "        - INDUS    proportion of non-retail business acres per town\n",
      "        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n",
      "        - NOX      nitric oxides concentration (parts per 10 million)\n",
      "        - RM       average number of rooms per dwelling\n",
      "        - AGE      proportion of owner-occupied units built prior to 1940\n",
      "        - DIS      weighted distances to five Boston employment centres\n",
      "        - RAD      index of accessibility to radial highways\n",
      "        - TAX      full-value property-tax rate per $10,000\n",
      "        - PTRATIO  pupil-teacher ratio by town\n",
      "        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n",
      "        - LSTAT    % lower status of the population\n",
      "        - MEDV     Median value of owner-occupied homes in $1000's\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Creator: Harrison, D. and Rubinfeld, D.L.\n",
      "\n",
      "This is a copy of UCI ML housing dataset.\n",
      "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n",
      "\n",
      "\n",
      "This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n",
      "\n",
      "The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\n",
      "prices and the demand for clean air', J. Environ. Economics & Management,\n",
      "vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n",
      "...', Wiley, 1980.   N.B. Various transformations are used in the table on\n",
      "pages 244-261 of the latter.\n",
      "\n",
      "The Boston house-price data has been used in many machine learning papers that address regression\n",
      "problems.   \n",
      "     \n",
      ".. topic:: References\n",
      "\n",
      "   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n",
      "   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(b.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\n",
      " 'B' 'LSTAT']\n"
     ]
    }
   ],
   "source": [
    "print(b.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.DataFrame(b.data,columns=b.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  \n",
       "0     15.3  396.90   4.98  \n",
       "1     17.8  396.90   9.14  \n",
       "2     17.8  392.83   4.03  \n",
       "3     18.7  394.63   2.94  \n",
       "4     18.7  396.90   5.33  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 13)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['price']=b.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 14)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506,)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "Y=df['price']\n",
    "Y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 13)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=df.drop(columns='price',axis=1)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn \n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(102, 13)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)\n",
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "lm=linear_model.LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.07434720e-01,  4.70749682e-02,  5.18696326e-02,  2.90128330e+00,\n",
       "       -2.19939470e+01,  3.67534680e+00,  3.63135869e-03, -1.53929226e+00,\n",
       "        3.44383020e-01, -1.33891786e-02, -1.03609826e+00,  9.36174382e-03,\n",
       "       -5.22732007e-01])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_predict=lm.predict(X_test)\n",
    "lm.coef_\n"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-29.5370306 , -28.79439819, -24.41744896, -20.30692465])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "kcv = linear_model.LinearRegression()\n",
    "scores = cross_val_score(kcv, X_train, Y_train, scoring='neg_mean_squared_error', cv=4)\n",
    "scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are the disadvantages of k-fold cross-validation?\n",
    "\n",
    "\n",
    "The disadvantage of k-fold cross-validation is that it can be slow to execute and it can be hard to parallelize. Additionally, k-fold cross-validation is not always the best option for all types of data sets. For example, k-fold cross validation might not be as accurate when there are few training examples relative to the number of test examples. In these cases, a different type of cross-validation, such as leave-one-out cross-validation, might be more appropriate. k-fold cross-validation is also not suitable for time series data. K-fold cross-validation should not be used when k is too small or k is too large."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=pd.DataFrame(Y_predict,Y_test)\n",
    "df1.to_csv(\"mse.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.997163993474077\n"
     ]
    }
   ],
   "source": [
    "mse = sklearn.metrics.mean_squared_error(Y_test, Y_predict)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7832689446848428"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn.metrics.r2_score(Y_test,Y_predict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "%matplotlib inline\n",
    "x_axis = b.data\n",
    "y_axis = b.target\n",
    "#plot histogram \n",
    "style.use('ggplot')\n",
    "plt.figure(figsize=(7,7))\n",
    "plt.hist(y_axis,bins=50)\n",
    "plt.xlabel('price in 1000s USD')\n",
    "plt.ylabel('number of houses')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot scatter plot\n",
    "style.use('ggplot')\n",
    "plt.figure(figsize=(7,7))\n",
    "plt.scatter(b.data[:,5],b.target)\n",
    "plt.ylabel('price in 1000s')\n",
    "plt.xlabel('number of houses')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA \n",
    "  \n",
    "# Let's say, components = 2 \n",
    "pca = PCA(n_components = 2) \n",
    "pca.fit(df) \n",
    "x_pca = pca.transform(df) \n",
    "  \n",
    "x_pca.shape "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rid=linear_model.Ridge(alpha=0.1,normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rid.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_predict=rid.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mse = sklearn.metrics.mean_squared_error(Y_test, Y_predict)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sklearn.metrics.r2_score(Y_test,Y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rid.score(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "las=linear_model.Lasso(alpha=0.00000001)\n",
    "las.fit(X_train,Y_train)\n",
    "Y_predict=rid.predict(X_test)\n",
    "print(las.coef_)\n",
    "\n",
    "mse = sklearn.metrics.mean_squared_error(Y_test, Y_predict)\n",
    "print(mse)\n",
    "las.score(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gb=GradientBoostingRegressor(learning_rate=0.7)\n",
    "gb.fit(X_train,Y_train)\n",
    "Y_predict=gb.predict(X_test)\n",
    "\n",
    "mse = sklearn.metrics.mean_squared_error(Y_test, Y_predict)\n",
    "print(mse)\n",
    "print(sklearn.metrics.r2_score(Y_test,Y_predict))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "par={'learning_rate':[0.001,0.01,0.1,0.2,0.3,0.4,0.5,0.6]}\n",
    "gr3 = GradientBoostingRegressor()\n",
    "gr3_mse = GridSearchCV(gr3,par,scoring=\"neg_mean_squared_error\", cv=7)\n",
    "gr3_mse.fit(X,Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(gr3_mse.best_params_)\n",
    "print(gr3_mse.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import datasets\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import make_pipeline\n",
    "boston = datasets.load_boston()\n",
    "data = pd.DataFrame(boston.data,columns=boston.feature_names)\n",
    "data = pd.concat([data,pd.Series(boston.target,name='MEDV')],axis=1)\n",
    "X = data[['LSTAT']]\n",
    "y = data['MEDV']\n",
    "x_training_set, x_test_set, y_training_set, y_test_set = train_test_split(X,y,test_size=0.10, \n",
    "                                                                          random_state=42,\n",
    "                                                                          shuffle=True)\n",
    "\n",
    "plt.scatter(x_test_set, y_test_set, s=10, alpha=0.3)\n",
    "\n",
    "for degree in [1,2]:\n",
    "\n",
    "    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())\n",
    "\n",
    "    model.fit(x_training_set,y_training_set)\n",
    "\n",
    "    y_plot = model.predict(x_test_set)\n",
    "\n",
    "    plt.plot(x_test_set, y_plot, label=\"degree %d\" % degree\n",
    "\n",
    "             +'; $R^2$: %.2f' % model.score(x_test_set, y_test_set))\n",
    "\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.xlabel(\"Test LSTAT Data\")\n",
    "\n",
    "plt.ylabel(\"Predicted Price\")\n",
    "\n",
    "plt.title(\"Variance Explained with Varying Polynomial\")\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
